#!/usr/bin/env node

var args = process.argv.splice(2);
var cmd = args[0];

var os = require('os'),
	fs = require('fs'),
	pkg = require('../package.json'),
	version = pkg.version
	midnight = require('../');

var files = {
	app: function(engine) {
		return [
			'var midnight = require(\'midnight\'),',
			'	app = midnight();',
			this.connect(),
			'// ' + Object.keys(midnight.engines).join(' '),
			'app.engine(app.engines.' + engine + ');',
			'',
			'app.route(\'/\', function(request, response) {',
			'	response.render(\'index.html\', { world: \'world!\' });',
			'});',
			'',
			'app.start();'
		].join(os.EOL);
	},
	connect: function() {
		try {
			require.resolve('connect');
			return [
				'var connect = require(\'connect\');',
				'',
				'// Use query-string middleware',
				'app.use(connect.query());',
				'app.use(connect.static(app.config.root + \'/static\'));',
				'',
				'if(app.config.env == \'development\')',
				'	app.use(connect.errorHandler());',
				''
			].join(os.EOL);
		} catch(err) {
			return [''].join(os.EOL);
		}
	},
	template: function() {
		return [
			'<!DOCTYPE html>',
			'<html>',
			'	<head>',
			'		<title>{{ globals.title }}</title>',
			'		<link rel="stylesheet" href="/stylesheet/style.css" />',
			'	</head>',
			'	<body>',
			'		<p>Hello {{ world }}</p>',
			'	</body>',
			'</html>'
		].join(os.EOL);
	},
	stylesheet: function() {
		return [
			'body {',
			'	font: 14px Georgia, sans-serif;',
			'}'
		].join(os.EOL);
	},
	package: function(name, version) {
		return JSON.stringify({
			name: name,
			version: '0.0.1',
			private: true,
			scripts: { start: 'node app.js' },
			dependencies: { midnight: '' + version + '' }
		}, null, 2);
	},
	readme: function(name) {
		return [
			'# ' + name,
			'Hello world!'
		].join(os.EOL);
	},
};

function mkdir(path, callback) {
	var path = path.split('/');
	for(var i=0;i<path.length;i++) {
		try {
			fs.mkdirSync(path.slice(0, i+1).join('/'));
		} catch(err) {
			continue;
		}
	}
}

function write(path, data) {
	fs.writeFileSync(path, data);
}

function abort(str) {
	console.error(str);
	process.exit(1);
}

if(cmd == 'version') {
	console.log(version);
	process.exit(1);
} else if(cmd == 'create') {

	var path = args[1] || 'application';
	var engine = args[2] || 'default';

	if(fs.existsSync(path))
		abort(path + ' already exists.');

	mkdir(path);

	write(path + '/app.js', files.app(engine));
	write(path + '/package.json', files.package(path, version));
	write(path + '/README.md', files.readme(path));

	mkdir(path + '/static/stylesheets');
	write(path + '/static/stylesheets/style.css', files.stylesheet());

	mkdir(path + '/views');
	write(path + '/views/index.html', files.template());

	console.log('Created application ' + path);
	console.log('');
	console.log('  Install dependencies:');
	console.log('    > cd ' + path + ' && npm install');
	console.log('');
	console.log('  Run the application:');
	console.log('    > node app');

	process.exit(1);
}
else if(cmd == 'help') {
	var help = args[1];
	if(help == 'create')
		console.log('Usage: midnight create name [' + Object.keys(midnight.engines).join('|') + ']');
	else if(help == 'engines')
		console.log('Usage: midnight engines');
	else
		console.log('Commands: help create engines');

	process.exit(1);
}
else if(cmd == 'engines') {
	console.log(Object.keys(midnight.engines).join(' '));
	process.exit(1);
} else
	abort('Unknown command, try midnight help');
